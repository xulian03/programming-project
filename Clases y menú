from enum import Enum
from abc import ABC, abstractmethod
from database.repository import RepositoryProvider
import time
from database.json_repository import JSONRepository
from database.repository import RepositoryProvider
from project import User, Player, Referee, Team, ClubMember, Position
from services.auth_service import AuthService
from services.player_service import PlayerManagementService
from services.team_service import TeamService
from services.report_service import ReportService

def main():
    players_repo = JSONRepository(Player)
    club_members_repo = JSONRepository(ClubMember)
    teams_repo = JSONRepository(Team)
    referee_repo = JSONRepository(Referee)

    RepositoryProvider.register("Player", players_repo)
    RepositoryProvider.register("Team", teams_repo)
    RepositoryProvider.register("ClubMember", club_members_repo)
    RepositoryProvider.register("Referee", referee_repo)

    auth_service: AuthService = AuthService.get_instance()
    player_service: PlayerManagementService = PlayerManagementService.get_instance()
    team_service: TeamService = TeamService.get_instance()




class Serializable(ABC):
    @abstractmethod
    def get_id(self):
        pass

    def serialize(self):
        return {attr: getattr(self, attr) for attr in self._serializable_attr}
    
    @classmethod
    def deserialize(cls, data: dict):
        clean_data = {k.lstrip("_"): v for k, v in data.items()}
        obj = cls(**clean_data)
        if not hasattr(obj, "_serializable_attr"):
            obj._serializable_attr = list(data.keys())
        return obj


# ==============================
# Enumeraciones
# ==============================
class Position(Enum):
    GK = 1
    LD = 2
    LI = 3
    DFC = 4
    MCD = 5
    MC = 6
    LW = 7
    MCO = 8
    DC = 9
    RW = 10


# ==============================
# Entidades
# ==============================
class User(Serializable):
    def __init__(self, id, name, age, password=None):
        self._id = id
        self._name = name
        self._age = age
        self._password = password
        self._serializable_attr = ["_id", "_name", "_age", "_password"]

    def get_id(self):
        return self._id

    def get_name(self):
        return self._name
    
    def get_age(self):
        return self._age
    
    def set_age(self, age):
        self._age = age

    def set_name(self, name):
        self._name = name

    def set_password(self, password):
        self._password = password

    def check_password(self, password):
        return self._password == password


class Team(Serializable):
    def __init__(self, id, coach: "ClubMember" = None, players=None):
        self._id = id
        self.coach = coach
        self.players: list[Player] = players or []
        self.staff: list[ClubMember] = []  
        self._serializable_attr = ["_id", "coach", "players", "staff"]

    def get_id(self):
        return self._id

    def get_coach(self):
        if isinstance(self.coach, str):
            coach_repo = RepositoryProvider.get("ClubMember")
            self.coach = coach_repo.find(self.coach)
        return self.coach

    def set_coach(self, coach: "ClubMember"):
        self.coach = coach

    def get_players(self) -> list:
        if self.players and isinstance(self.players[0], str):
            players_repo = RepositoryProvider.get("Player")
            self.players = [players_repo.find(player) for player in self.players]
        return self.players

    def add_player(self, player: "Player"):
        if player not in self.players:
            self.players.append(player)

    def remove_player(self, player: "Player"):
        if player in self.players:
            self.players.remove(player)

    def get_staff(self) -> list:
        return self.staff

    def add_staff(self, staff_member: "ClubMember"):
        if staff_member not in self.staff:
            self.staff.append(staff_member)

    def remove_staff(self, staff_member: "ClubMember"):
        if staff_member in self.staff:
            self.staff.remove(staff_member)

    def serialize(self):
        data = super().serialize()
        data["coach"] = self.coach.get_id() if isinstance(self.coach, ClubMember) else None
        data["players"] = [player.get_id() for player in self.players if isinstance(player, Player)]
        return data
    
    @classmethod
    def deserialize(cls, data):
        obj = super().deserialize(data)
        return obj


class Player(User):
    def __init__(
        self, 
        id, 
        name, 
        age, 
        password=None,
        team_id=None, 
        squad_num=None, 
        position: Position = None, 
        goals=0, 
        assists=0
    ):
        super().__init__(id, name, age, password)
        self.team_id = team_id
        self._squad_num = squad_num
        self._position = position
        self.stats = {"goles": goals, "asistencias": assists, "partidos": 0}
        self.history = []
        self._serializable_attr += [
            "team_id", "_squad_num", "_position", "stats", "history"
        ]
    
    def get_position(self):
        return Position[self._position] if isinstance(self._position, str) else self._position

    def set_position(self, position):
        self._position = position

    def add_match(self, rival, resultado):
        self.history.append({"rival": rival, "resultado": resultado})
        self.stats["partidos"] += 1

    def serialize(self):
        data = super().serialize()
        data["team_id"] = self.team_id
        data["_position"] = self._position.name if isinstance(self._position, Position) else self._position
        return data


class Match(Serializable):
    def __init__(self, id, date, rival, goals, assists, minutes):
        self._id = id
        self.date = date 
        self.rival = rival 
        self.goals = goals 
        self.assists = assists 
        self.minutes = minutes
        self._serializable_attr = ["_id", "date", "rival", "goals", "assists", "minutes"]

    def get_id(self):
        return self._id


class ClubMember(User):
    def __init__(self, id, name, age, password=None, team_id=None, role=None):
        super().__init__(id, name, age, password)
        self.team_id = team_id
        self.role = role
        self._serializable_attr += ["team_id", "role"]


class Referee(User):
    def __init__(self, id, name, age, password=None, licencia=None):
        super().__init__(id, name, age, password)
        self.__licencia = licencia
        self.assigned_matches = []
        self._serializable_attr += ["__licencia", "assigned_matches"]
    
    def get_licencia(self):
        return self.__licencia  
    
    def set_licencia(self, licencia):
        self.__licencia = licencia      


class User:
    def __init__(self, id, name, age, password):
        self.id = id
        self.name = name
        self.age = age
        self.password = password

    def check_password(self, password):
        return self.password == password


class Player(User):
    def __init__(self, id, name, age, password, position, team):
        super().__init__(id, name, age, password)
        self.position = position
        self.team = team


class ClubMember(User):
    def __init__(self, id, name, age, password, team, role):
        super().__init__(id, name, age, password)
        self.team = team
        self.role = role


class Referee(User):
    def __init__(self, id, name, age, password, license):
        super().__init__(id, name, age, password)
        self.license = license


import time

class User:
    def __init__(self, id, name, age, password):
        self.id = id
        self.name = name
        self.age = age
        self.password = password

    def check_password(self, password):
        return self.password == password


class Player(User):
    def __init__(self, id, name, age, password, position, team):
        super().__init__(id, name, age, password)
        self.position = position
        self.team = team


class ClubMember(User):
    def __init__(self, id, name, age, password, team, role):
        super().__init__(id, name, age, password)
        self.team = team
        self.role = role


class Referee(User):
    def __init__(self, id, name, age, password, license):
        super().__init__(id, name, age, password)
        self.license = license


class MainMenu:
    def __init__(self):
        self.users = []

    def show(self):
        while True:
            print("=== MENÚ PRINCIPAL ===")
            print("1. Registrarse")
            print("2. Iniciar sesión")
            print("3. Salir")
            option = input("Selecciona: ")

            if option == "1":
                self.register_user()
            elif option == "2":
                self.login()
            elif option == "3":
                print("Saliendo del sistema...")
                time.sleep(2)
                break
            else:
                print("Opción inválida")
                time.sleep(2)

    def register_user(self):
        print("=== REGISTRO ===")
        print("1. Jugador")
        print("2. Staff")
        print("3. Árbitro")
        user_type = input("Selecciona el tipo de usuario: ")

        id = input("ID: ")
        name = input("Nombre: ")
        age = int(input("Edad: "))
        password = input("Contraseña: ")

        if len(password) < 6:
            print("La contraseña debe tener mínimo 6 caracteres")
            time.sleep(2)
            return

        if user_type == "1":
            if age < 14 or age > 62:
                print("Edad inválida para jugador")
                time.sleep(2)
                return
            position = input("Posición: ")
            team = input("Equipo: ")
            player = Player(id, name, age, password, position, team)
            self.users.append(player)
            print("Jugador registrado con éxito")
            time.sleep(2)

        elif user_type == "2":
            if age < 18:
                print("Edad inválida para staff")
                time.sleep(2)
                return
            team = input("Equipo: ")
            role = input("Rol: ")
            staff = ClubMember(id, name, age, password, team, role)
            self.users.append(staff)
            print("Staff registrado con éxito")
            time.sleep(2)

        elif user_type == "3":
            if age < 18 or age > 62:
                print("Edad inválida para árbitro")
                time.sleep(2)
                return
            license = input("Licencia: ")
            referee = Referee(id, name, age, password, license)
            self.users.append(referee)
            print("Árbitro registrado con éxito")
            time.sleep(2)

        else:
            print("Tipo de usuario inválido")
            time.sleep(2)

    def login(self):
        print("=== INICIO DE SESIÓN ===")
        id = input("ID: ")
        password = input("Contraseña: ")

        user = next((u for u in self.users if u.id == id and u.check_password(password)), None)

        if user:
            print("Inicio de sesión exitoso")
            time.sleep(2)
            if isinstance(user, Player):
                PlayerMenu(user).show()
            elif isinstance(user, ClubMember):
                StaffMenu(user).show()
            elif isinstance(user, Referee):
                RefereeMenu(user).show()
        else:
            print("Credenciales incorrectas")
            time.sleep(2)


class PlayerMenu:
    def __init__(self, player):
        self.player = player

    def show(self):
        while True:
            print("=== MENÚ JUGADOR ===")
            print("1. Ver estadísticas")
            print("2. Actualizar perfil")
            print("3. Cerrar sesión")
            option = input("Selecciona: ")

            if option == "1":
                self.view_stats()
            elif option == "2":
                self.update_profile()
            elif option == "3":
                print("Cerrando sesión...")
                time.sleep(2)
                break
            else:
                print("Opción inválida")
                time.sleep(2)

    def view_stats(self):
        pass

    def update_profile(self):
        pass


class StaffMenu:
    def __init__(self, staff):
        self.staff = staff

    def show(self):
        while True:
            print("=== MENÚ STAFF ===")
            print("1. Ver jugadores del equipo propio")
            print("2. Actualizar perfil")
            print("3. Buscar jugadores externos")
            print("4. Crear equipo")
            print("5. Cerrar sesión")
            option = input("Selecciona: ")

            if option == "1":
                self.view_team_players()
            elif option == "2":
                self.update_profile()
            elif option == "3":
                self.search_players()
            elif option == "4":
                self.create_team()
            elif option == "5":
                print("Cerrando sesión...")
                time.sleep(2)
                break
            else:
                print("Opción inválida")
                time.sleep(2)

    def view_team_players(self):
        pass

    def update_profile(self):
        pass

    def search_players(self):
        pass

    def create_team(self):
        pass


class RefereeMenu:
    def __init__(self, referee):
        self.referee = referee

    def show(self):
        while True:
            print("=== MENÚ ÁRBITRO ===")
            print("1.Buscar jugadores")
            print("2. Ver/Actualizar perfil")
            print("3. Exportar archivos de jugadores")
            print("4. Cerrar sesión")
            option = input("Selecciona: ")

            if option == "1":
                self.search_players()
            elif option == "2":
                self.update_profile()
            elif option == "3":
                self.export_players()
            elif option == "4":
                print("Cerrando sesión...")
                time.sleep(2)
                break
            else:
                print("Opción inválida")
                time.sleep(2)

    def search_player(self):
        pass

    def update_profile(self):
        pass

    def export_players(self):
        pass


if __name__ == "__main__":
    MainMenu().show()